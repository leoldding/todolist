[{"/Users/leoding/Desktop/gitRepos/todolist/frontend/src/index.js":"1","/Users/leoding/Desktop/gitRepos/todolist/frontend/src/reportWebVitals.js":"2","/Users/leoding/Desktop/gitRepos/todolist/frontend/src/App.js":"3","/Users/leoding/Desktop/gitRepos/todolist/frontend/src/components/login.js":"4","/Users/leoding/Desktop/gitRepos/todolist/frontend/src/components/todo.js":"5"},{"size":535,"mtime":1668102449232,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1667495209748,"results":"8","hashOfConfig":"7"},{"size":489,"mtime":1668450839144,"results":"9","hashOfConfig":"7"},{"size":5190,"mtime":1668460155809,"results":"10","hashOfConfig":"7"},{"size":735,"mtime":1668450893670,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12gczi2",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/leoding/Desktop/gitRepos/todolist/frontend/src/index.js",[],[],"/Users/leoding/Desktop/gitRepos/todolist/frontend/src/reportWebVitals.js",[],[],"/Users/leoding/Desktop/gitRepos/todolist/frontend/src/App.js",[],[],"/Users/leoding/Desktop/gitRepos/todolist/frontend/src/components/login.js",["29","30"],[],"import React from 'react';\nimport Axios from 'axios';\nimport './login.css';\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: '',\n            userError: '',\n            passError: '',\n            login: true,\n        };\n    }\n\n    async componentDidMount() {\n        let returnedUser\n        try {\n            await Axios.get('/backend/check')\n                .then(function (response) {\n                    returnedUser = response.data.username\n                })\n            this.props.setState({loggedIn:true, username: returnedUser})\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    credentialSubmit = async (event) => {\n        event.preventDefault();\n\n        if (this.state.username === '') {\n            this.setState({userError: 'Username must not be empty!', passError: ''})\n        } else if (this.state.password === '') {\n            this.setState({passError: 'Password must not be empty!', userError: ''})\n        } else if (this.state.login === true) {\n            try {\n                await Axios.post('/backend/login', {\n                    username: this.state.username,\n                    password: this.state.password,\n                });\n                this.props.setState({loggedIn: true, username: this.state.username})\n                this.setState({userError: '', passError: ''})\n            } catch (err) {\n                console.log(err)\n                if (err.response.status === 400) {\n                    this.setState({userError: 'Invalid User', passError: ''})\n                } else if (err.response.status === 401) {\n                    this.setState({passError: 'Invalid Password', userError: ''})\n                }\n            };\n        } else {\n            try {\n                await Axios.post('/backend/signup', {\n                    username: this.state.username,\n                    password: this.state.password,\n                });\n                this.setState({login: true, username: '', password: '', userError: '', passError: ''})\n            } catch (err) {\n                console.log(err)\n                if (err.response.status === 400) {\n                    this.setState({userError: 'Username Taken', passError: ''})\n                }\n            }\n        }\n    };\n\n    signup = async (event) => {\n        event.preventDefault();\n        this.setState({login: false, username: '', password: '', userError: '', passError: ''})\n    }\n\n    signin = async (event) => {\n        event.preventDefault();\n        this.setState({login: true, username: '', password: '', userError: '', passError: ''})\n    }\n\n\n    render() {\n        const userErrorMessage = this.state.userError\n        const passErrorMessage = this.state.passError\n        if (this.state.login === true) {\n            return (\n                <div className={'form'}>\n                    <h2>Log In Here</h2>\n                    <form onSubmit={this.credentialSubmit}>\n                        <div className={'inputContainer'}>\n                            <input type={'text'} placeholder={'Username'} value={this.state.username}\n                                   onChange={(event) => this.setState({username: event.target.value})} autoFocus/>\n                            <div className={'errorMessage'}>{userErrorMessage}</div>\n                        </div>\n                        <div className={'inputContainer'}>\n                            <input type={'password'} placeholder={'Password'} value={this.state.password}\n                                   onChange={(event) => this.setState({password: event.target.value})}/>\n                            <div className={'errorMessage'}>{passErrorMessage}</div>\n                        </div>\n                        <button>Login</button>\n                    </form>\n                    <p>Don't have an account? <a onClick={this.signup}>Sign Up</a></p>\n                </div>\n            );\n        } else {\n            return (\n                <div className={'form'}>\n                    <h2>Sign Up Here</h2>\n                    <form onSubmit={this.credentialSubmit}>\n                        <div className={'inputContainer'}>\n                            <input type={'text'} placeholder={'Username'} value={this.state.username}\n                                   onChange={(event) => this.setState({username: event.target.value})} autoFocus/>\n                            <div className={'errorMessage'}>{userErrorMessage}</div>\n                        </div>\n                        <div className={'inputContainer'}>\n                            <input type={'password'} placeholder={'Password'} value={this.state.password}\n                                   onChange={(event) => this.setState({password: event.target.value})}/>\n                            <div className={'errorMessage'}>{passErrorMessage}</div>\n                        </div>\n                        <button>Sign Up</button>\n                    </form>\n                    <p>Have an account? <a onClick={this.signin}> Log In</a></p>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Login;","/Users/leoding/Desktop/gitRepos/todolist/frontend/src/components/todo.js",["31"],[],"import React from 'react';\nimport Axios from 'axios';\nimport './todo.css';\n\nclass Todo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.user,\n        };\n    }\n\n    logout = async (event) => {\n        event.preventDefault()\n\n        try {\n            await Axios.get('/backend/logout')\n        } catch(err) {\n            console.log(err)\n        }\n        this.props.setState({loggedIn: false, username: ''})\n    }\n\n    render() {\n        const user = this.state.user\n        return(\n            <div>\n                <h1>Hello {user}!</h1>\n                <p><a onClick={this.logout}>Log Out</a></p>\n            </div>\n        );\n    }\n}\n\nexport default Todo;",{"ruleId":"32","severity":1,"message":"33","line":100,"column":47,"nodeType":"34","endLine":100,"endColumn":72},{"ruleId":"32","severity":1,"message":"33","line":120,"column":41,"nodeType":"34","endLine":120,"endColumn":66},{"ruleId":"32","severity":1,"message":"33","line":29,"column":20,"nodeType":"34","endLine":29,"endColumn":45},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]